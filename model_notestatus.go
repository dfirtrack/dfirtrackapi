/*
 * DFIRTrack
 *
 * OpenAPI 3 - Documentation of DFIRTrack API
 *
 * API version: v1.5.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dfirtrackapi

import (
	"encoding/json"
)

// Notestatus struct for Notestatus
type Notestatus struct {
	NotestatusId *int32 `json:"notestatus_id,omitempty"`
	NotestatusName string `json:"notestatus_name"`
}

// NewNotestatus instantiates a new Notestatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotestatus(notestatusName string, ) *Notestatus {
	this := Notestatus{}
	this.NotestatusName = notestatusName
	return &this
}

// NewNotestatusWithDefaults instantiates a new Notestatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotestatusWithDefaults() *Notestatus {
	this := Notestatus{}
	return &this
}

// GetNotestatusId returns the NotestatusId field value if set, zero value otherwise.
func (o *Notestatus) GetNotestatusId() int32 {
	if o == nil || o.NotestatusId == nil {
		var ret int32
		return ret
	}
	return *o.NotestatusId
}

// GetNotestatusIdOk returns a tuple with the NotestatusId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notestatus) GetNotestatusIdOk() (*int32, bool) {
	if o == nil || o.NotestatusId == nil {
		return nil, false
	}
	return o.NotestatusId, true
}

// HasNotestatusId returns a boolean if a field has been set.
func (o *Notestatus) HasNotestatusId() bool {
	if o != nil && o.NotestatusId != nil {
		return true
	}

	return false
}

// SetNotestatusId gets a reference to the given int32 and assigns it to the NotestatusId field.
func (o *Notestatus) SetNotestatusId(v int32) {
	o.NotestatusId = &v
}

// GetNotestatusName returns the NotestatusName field value
func (o *Notestatus) GetNotestatusName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.NotestatusName
}

// GetNotestatusNameOk returns a tuple with the NotestatusName field value
// and a boolean to check if the value has been set.
func (o *Notestatus) GetNotestatusNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NotestatusName, true
}

// SetNotestatusName sets field value
func (o *Notestatus) SetNotestatusName(v string) {
	o.NotestatusName = v
}

func (o Notestatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NotestatusId != nil {
		toSerialize["notestatus_id"] = o.NotestatusId
	}
	if true {
		toSerialize["notestatus_name"] = o.NotestatusName
	}
	return json.Marshal(toSerialize)
}

type NullableNotestatus struct {
	value *Notestatus
	isSet bool
}

func (v NullableNotestatus) Get() *Notestatus {
	return v.value
}

func (v *NullableNotestatus) Set(val *Notestatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNotestatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNotestatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotestatus(val *Notestatus) *NullableNotestatus {
	return &NullableNotestatus{value: val, isSet: true}
}

func (v NullableNotestatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotestatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



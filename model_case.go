/*
DFIRTrack

OpenAPI 3 - Documentation of DFIRTrack API

API version: v2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dfirtrackapi

import (
	"encoding/json"
	"time"
)

// Case struct for Case
type Case struct {
	CaseId *int32 `json:"case_id,omitempty"`
	CaseIdExternal NullableString `json:"case_id_external,omitempty"`
	CaseName string `json:"case_name"`
	Casepriority *int32 `json:"casepriority,omitempty"`
	Casestatus *int32 `json:"casestatus,omitempty"`
	Casetype NullableInt32 `json:"casetype,omitempty"`
	Tag *[]int32 `json:"tag,omitempty"`
	CaseIsIncident bool `json:"case_is_incident"`
	CaseStartTime NullableTime `json:"case_start_time,omitempty"`
	CaseEndTime NullableTime `json:"case_end_time,omitempty"`
	CaseCreatedByUserId int32 `json:"case_created_by_user_id"`
	CaseCreateTime *time.Time `json:"case_create_time,omitempty"`
	CaseModifiedByUserId NullableInt32 `json:"case_modified_by_user_id,omitempty"`
	CaseModifyTime *time.Time `json:"case_modify_time,omitempty"`
}

// NewCase instantiates a new Case object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCase(caseName string, caseIsIncident bool, caseCreatedByUserId int32) *Case {
	this := Case{}
	this.CaseName = caseName
	this.CaseIsIncident = caseIsIncident
	this.CaseCreatedByUserId = caseCreatedByUserId
	return &this
}

// NewCaseWithDefaults instantiates a new Case object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseWithDefaults() *Case {
	this := Case{}
	return &this
}

// GetCaseId returns the CaseId field value if set, zero value otherwise.
func (o *Case) GetCaseId() int32 {
	if o == nil || o.CaseId == nil {
		var ret int32
		return ret
	}
	return *o.CaseId
}

// GetCaseIdOk returns a tuple with the CaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetCaseIdOk() (*int32, bool) {
	if o == nil || o.CaseId == nil {
		return nil, false
	}
	return o.CaseId, true
}

// HasCaseId returns a boolean if a field has been set.
func (o *Case) HasCaseId() bool {
	if o != nil && o.CaseId != nil {
		return true
	}

	return false
}

// SetCaseId gets a reference to the given int32 and assigns it to the CaseId field.
func (o *Case) SetCaseId(v int32) {
	o.CaseId = &v
}

// GetCaseIdExternal returns the CaseIdExternal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Case) GetCaseIdExternal() string {
	if o == nil || o.CaseIdExternal.Get() == nil {
		var ret string
		return ret
	}
	return *o.CaseIdExternal.Get()
}

// GetCaseIdExternalOk returns a tuple with the CaseIdExternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Case) GetCaseIdExternalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaseIdExternal.Get(), o.CaseIdExternal.IsSet()
}

// HasCaseIdExternal returns a boolean if a field has been set.
func (o *Case) HasCaseIdExternal() bool {
	if o != nil && o.CaseIdExternal.IsSet() {
		return true
	}

	return false
}

// SetCaseIdExternal gets a reference to the given NullableString and assigns it to the CaseIdExternal field.
func (o *Case) SetCaseIdExternal(v string) {
	o.CaseIdExternal.Set(&v)
}
// SetCaseIdExternalNil sets the value for CaseIdExternal to be an explicit nil
func (o *Case) SetCaseIdExternalNil() {
	o.CaseIdExternal.Set(nil)
}

// UnsetCaseIdExternal ensures that no value is present for CaseIdExternal, not even an explicit nil
func (o *Case) UnsetCaseIdExternal() {
	o.CaseIdExternal.Unset()
}

// GetCaseName returns the CaseName field value
func (o *Case) GetCaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CaseName
}

// GetCaseNameOk returns a tuple with the CaseName field value
// and a boolean to check if the value has been set.
func (o *Case) GetCaseNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CaseName, true
}

// SetCaseName sets field value
func (o *Case) SetCaseName(v string) {
	o.CaseName = v
}

// GetCasepriority returns the Casepriority field value if set, zero value otherwise.
func (o *Case) GetCasepriority() int32 {
	if o == nil || o.Casepriority == nil {
		var ret int32
		return ret
	}
	return *o.Casepriority
}

// GetCasepriorityOk returns a tuple with the Casepriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetCasepriorityOk() (*int32, bool) {
	if o == nil || o.Casepriority == nil {
		return nil, false
	}
	return o.Casepriority, true
}

// HasCasepriority returns a boolean if a field has been set.
func (o *Case) HasCasepriority() bool {
	if o != nil && o.Casepriority != nil {
		return true
	}

	return false
}

// SetCasepriority gets a reference to the given int32 and assigns it to the Casepriority field.
func (o *Case) SetCasepriority(v int32) {
	o.Casepriority = &v
}

// GetCasestatus returns the Casestatus field value if set, zero value otherwise.
func (o *Case) GetCasestatus() int32 {
	if o == nil || o.Casestatus == nil {
		var ret int32
		return ret
	}
	return *o.Casestatus
}

// GetCasestatusOk returns a tuple with the Casestatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetCasestatusOk() (*int32, bool) {
	if o == nil || o.Casestatus == nil {
		return nil, false
	}
	return o.Casestatus, true
}

// HasCasestatus returns a boolean if a field has been set.
func (o *Case) HasCasestatus() bool {
	if o != nil && o.Casestatus != nil {
		return true
	}

	return false
}

// SetCasestatus gets a reference to the given int32 and assigns it to the Casestatus field.
func (o *Case) SetCasestatus(v int32) {
	o.Casestatus = &v
}

// GetCasetype returns the Casetype field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Case) GetCasetype() int32 {
	if o == nil || o.Casetype.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Casetype.Get()
}

// GetCasetypeOk returns a tuple with the Casetype field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Case) GetCasetypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Casetype.Get(), o.Casetype.IsSet()
}

// HasCasetype returns a boolean if a field has been set.
func (o *Case) HasCasetype() bool {
	if o != nil && o.Casetype.IsSet() {
		return true
	}

	return false
}

// SetCasetype gets a reference to the given NullableInt32 and assigns it to the Casetype field.
func (o *Case) SetCasetype(v int32) {
	o.Casetype.Set(&v)
}
// SetCasetypeNil sets the value for Casetype to be an explicit nil
func (o *Case) SetCasetypeNil() {
	o.Casetype.Set(nil)
}

// UnsetCasetype ensures that no value is present for Casetype, not even an explicit nil
func (o *Case) UnsetCasetype() {
	o.Casetype.Unset()
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *Case) GetTag() []int32 {
	if o == nil || o.Tag == nil {
		var ret []int32
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetTagOk() (*[]int32, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Case) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given []int32 and assigns it to the Tag field.
func (o *Case) SetTag(v []int32) {
	o.Tag = &v
}

// GetCaseIsIncident returns the CaseIsIncident field value
func (o *Case) GetCaseIsIncident() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CaseIsIncident
}

// GetCaseIsIncidentOk returns a tuple with the CaseIsIncident field value
// and a boolean to check if the value has been set.
func (o *Case) GetCaseIsIncidentOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CaseIsIncident, true
}

// SetCaseIsIncident sets field value
func (o *Case) SetCaseIsIncident(v bool) {
	o.CaseIsIncident = v
}

// GetCaseStartTime returns the CaseStartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Case) GetCaseStartTime() time.Time {
	if o == nil || o.CaseStartTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CaseStartTime.Get()
}

// GetCaseStartTimeOk returns a tuple with the CaseStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Case) GetCaseStartTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaseStartTime.Get(), o.CaseStartTime.IsSet()
}

// HasCaseStartTime returns a boolean if a field has been set.
func (o *Case) HasCaseStartTime() bool {
	if o != nil && o.CaseStartTime.IsSet() {
		return true
	}

	return false
}

// SetCaseStartTime gets a reference to the given NullableTime and assigns it to the CaseStartTime field.
func (o *Case) SetCaseStartTime(v time.Time) {
	o.CaseStartTime.Set(&v)
}
// SetCaseStartTimeNil sets the value for CaseStartTime to be an explicit nil
func (o *Case) SetCaseStartTimeNil() {
	o.CaseStartTime.Set(nil)
}

// UnsetCaseStartTime ensures that no value is present for CaseStartTime, not even an explicit nil
func (o *Case) UnsetCaseStartTime() {
	o.CaseStartTime.Unset()
}

// GetCaseEndTime returns the CaseEndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Case) GetCaseEndTime() time.Time {
	if o == nil || o.CaseEndTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CaseEndTime.Get()
}

// GetCaseEndTimeOk returns a tuple with the CaseEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Case) GetCaseEndTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaseEndTime.Get(), o.CaseEndTime.IsSet()
}

// HasCaseEndTime returns a boolean if a field has been set.
func (o *Case) HasCaseEndTime() bool {
	if o != nil && o.CaseEndTime.IsSet() {
		return true
	}

	return false
}

// SetCaseEndTime gets a reference to the given NullableTime and assigns it to the CaseEndTime field.
func (o *Case) SetCaseEndTime(v time.Time) {
	o.CaseEndTime.Set(&v)
}
// SetCaseEndTimeNil sets the value for CaseEndTime to be an explicit nil
func (o *Case) SetCaseEndTimeNil() {
	o.CaseEndTime.Set(nil)
}

// UnsetCaseEndTime ensures that no value is present for CaseEndTime, not even an explicit nil
func (o *Case) UnsetCaseEndTime() {
	o.CaseEndTime.Unset()
}

// GetCaseCreatedByUserId returns the CaseCreatedByUserId field value
func (o *Case) GetCaseCreatedByUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CaseCreatedByUserId
}

// GetCaseCreatedByUserIdOk returns a tuple with the CaseCreatedByUserId field value
// and a boolean to check if the value has been set.
func (o *Case) GetCaseCreatedByUserIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CaseCreatedByUserId, true
}

// SetCaseCreatedByUserId sets field value
func (o *Case) SetCaseCreatedByUserId(v int32) {
	o.CaseCreatedByUserId = v
}

// GetCaseCreateTime returns the CaseCreateTime field value if set, zero value otherwise.
func (o *Case) GetCaseCreateTime() time.Time {
	if o == nil || o.CaseCreateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CaseCreateTime
}

// GetCaseCreateTimeOk returns a tuple with the CaseCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetCaseCreateTimeOk() (*time.Time, bool) {
	if o == nil || o.CaseCreateTime == nil {
		return nil, false
	}
	return o.CaseCreateTime, true
}

// HasCaseCreateTime returns a boolean if a field has been set.
func (o *Case) HasCaseCreateTime() bool {
	if o != nil && o.CaseCreateTime != nil {
		return true
	}

	return false
}

// SetCaseCreateTime gets a reference to the given time.Time and assigns it to the CaseCreateTime field.
func (o *Case) SetCaseCreateTime(v time.Time) {
	o.CaseCreateTime = &v
}

// GetCaseModifiedByUserId returns the CaseModifiedByUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Case) GetCaseModifiedByUserId() int32 {
	if o == nil || o.CaseModifiedByUserId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.CaseModifiedByUserId.Get()
}

// GetCaseModifiedByUserIdOk returns a tuple with the CaseModifiedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Case) GetCaseModifiedByUserIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaseModifiedByUserId.Get(), o.CaseModifiedByUserId.IsSet()
}

// HasCaseModifiedByUserId returns a boolean if a field has been set.
func (o *Case) HasCaseModifiedByUserId() bool {
	if o != nil && o.CaseModifiedByUserId.IsSet() {
		return true
	}

	return false
}

// SetCaseModifiedByUserId gets a reference to the given NullableInt32 and assigns it to the CaseModifiedByUserId field.
func (o *Case) SetCaseModifiedByUserId(v int32) {
	o.CaseModifiedByUserId.Set(&v)
}
// SetCaseModifiedByUserIdNil sets the value for CaseModifiedByUserId to be an explicit nil
func (o *Case) SetCaseModifiedByUserIdNil() {
	o.CaseModifiedByUserId.Set(nil)
}

// UnsetCaseModifiedByUserId ensures that no value is present for CaseModifiedByUserId, not even an explicit nil
func (o *Case) UnsetCaseModifiedByUserId() {
	o.CaseModifiedByUserId.Unset()
}

// GetCaseModifyTime returns the CaseModifyTime field value if set, zero value otherwise.
func (o *Case) GetCaseModifyTime() time.Time {
	if o == nil || o.CaseModifyTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CaseModifyTime
}

// GetCaseModifyTimeOk returns a tuple with the CaseModifyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetCaseModifyTimeOk() (*time.Time, bool) {
	if o == nil || o.CaseModifyTime == nil {
		return nil, false
	}
	return o.CaseModifyTime, true
}

// HasCaseModifyTime returns a boolean if a field has been set.
func (o *Case) HasCaseModifyTime() bool {
	if o != nil && o.CaseModifyTime != nil {
		return true
	}

	return false
}

// SetCaseModifyTime gets a reference to the given time.Time and assigns it to the CaseModifyTime field.
func (o *Case) SetCaseModifyTime(v time.Time) {
	o.CaseModifyTime = &v
}

func (o Case) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CaseId != nil {
		toSerialize["case_id"] = o.CaseId
	}
	if o.CaseIdExternal.IsSet() {
		toSerialize["case_id_external"] = o.CaseIdExternal.Get()
	}
	if true {
		toSerialize["case_name"] = o.CaseName
	}
	if o.Casepriority != nil {
		toSerialize["casepriority"] = o.Casepriority
	}
	if o.Casestatus != nil {
		toSerialize["casestatus"] = o.Casestatus
	}
	if o.Casetype.IsSet() {
		toSerialize["casetype"] = o.Casetype.Get()
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if true {
		toSerialize["case_is_incident"] = o.CaseIsIncident
	}
	if o.CaseStartTime.IsSet() {
		toSerialize["case_start_time"] = o.CaseStartTime.Get()
	}
	if o.CaseEndTime.IsSet() {
		toSerialize["case_end_time"] = o.CaseEndTime.Get()
	}
	if true {
		toSerialize["case_created_by_user_id"] = o.CaseCreatedByUserId
	}
	if o.CaseCreateTime != nil {
		toSerialize["case_create_time"] = o.CaseCreateTime
	}
	if o.CaseModifiedByUserId.IsSet() {
		toSerialize["case_modified_by_user_id"] = o.CaseModifiedByUserId.Get()
	}
	if o.CaseModifyTime != nil {
		toSerialize["case_modify_time"] = o.CaseModifyTime
	}
	return json.Marshal(toSerialize)
}

type NullableCase struct {
	value *Case
	isSet bool
}

func (v NullableCase) Get() *Case {
	return v.value
}

func (v *NullableCase) Set(val *Case) {
	v.value = val
	v.isSet = true
}

func (v NullableCase) IsSet() bool {
	return v.isSet
}

func (v *NullableCase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCase(val *Case) *NullableCase {
	return &NullableCase{value: val, isSet: true}
}

func (v NullableCase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



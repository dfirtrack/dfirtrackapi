/*
 * DFIRTrack
 *
 * OpenAPI 3 - Documentation of DFIRTrack API
 *
 * API version: v1.2.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dfirtrackapi

import (
	"encoding/json"
)

// Casetype struct for Casetype
type Casetype struct {
	CasetypeId *int32 `json:"casetype_id,omitempty"`
	CasetypeName string `json:"casetype_name"`
}

// NewCasetype instantiates a new Casetype object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCasetype(casetypeName string, ) *Casetype {
	this := Casetype{}
	this.CasetypeName = casetypeName
	return &this
}

// NewCasetypeWithDefaults instantiates a new Casetype object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCasetypeWithDefaults() *Casetype {
	this := Casetype{}
	return &this
}

// GetCasetypeId returns the CasetypeId field value if set, zero value otherwise.
func (o *Casetype) GetCasetypeId() int32 {
	if o == nil || o.CasetypeId == nil {
		var ret int32
		return ret
	}
	return *o.CasetypeId
}

// GetCasetypeIdOk returns a tuple with the CasetypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Casetype) GetCasetypeIdOk() (*int32, bool) {
	if o == nil || o.CasetypeId == nil {
		return nil, false
	}
	return o.CasetypeId, true
}

// HasCasetypeId returns a boolean if a field has been set.
func (o *Casetype) HasCasetypeId() bool {
	if o != nil && o.CasetypeId != nil {
		return true
	}

	return false
}

// SetCasetypeId gets a reference to the given int32 and assigns it to the CasetypeId field.
func (o *Casetype) SetCasetypeId(v int32) {
	o.CasetypeId = &v
}

// GetCasetypeName returns the CasetypeName field value
func (o *Casetype) GetCasetypeName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.CasetypeName
}

// GetCasetypeNameOk returns a tuple with the CasetypeName field value
// and a boolean to check if the value has been set.
func (o *Casetype) GetCasetypeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CasetypeName, true
}

// SetCasetypeName sets field value
func (o *Casetype) SetCasetypeName(v string) {
	o.CasetypeName = v
}

func (o Casetype) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CasetypeId != nil {
		toSerialize["casetype_id"] = o.CasetypeId
	}
	if true {
		toSerialize["casetype_name"] = o.CasetypeName
	}
	return json.Marshal(toSerialize)
}

type NullableCasetype struct {
	value *Casetype
	isSet bool
}

func (v NullableCasetype) Get() *Casetype {
	return v.value
}

func (v *NullableCasetype) Set(val *Casetype) {
	v.value = val
	v.isSet = true
}

func (v NullableCasetype) IsSet() bool {
	return v.isSet
}

func (v *NullableCasetype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCasetype(val *Casetype) *NullableCasetype {
	return &NullableCasetype{value: val, isSet: true}
}

func (v NullableCasetype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCasetype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



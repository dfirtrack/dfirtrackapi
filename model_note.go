/*
 * DFIRTrack
 *
 * OpenAPI 3 - Documentation of DFIRTrack API
 *
 * API version: v1.5.5
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dfirtrackapi

import (
	"encoding/json"
	"time"
)

// Note struct for Note
type Note struct {
	NoteId *int32 `json:"note_id,omitempty"`
	NoteTitle string `json:"note_title"`
	NoteContent string `json:"note_content"`
	NoteVersion int32 `json:"note_version"`
	Case NullableInt32 `json:"case,omitempty"`
	Notestatus *int32 `json:"notestatus,omitempty"`
	Tag *[]int32 `json:"tag,omitempty"`
	NoteCreateTime *time.Time `json:"note_create_time,omitempty"`
	NoteCreatedByUserId int32 `json:"note_created_by_user_id"`
	NoteModifyTime *time.Time `json:"note_modify_time,omitempty"`
	NoteModifiedByUserId int32 `json:"note_modified_by_user_id"`
}

// NewNote instantiates a new Note object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNote(noteTitle string, noteContent string, noteVersion int32, noteCreatedByUserId int32, noteModifiedByUserId int32, ) *Note {
	this := Note{}
	this.NoteTitle = noteTitle
	this.NoteContent = noteContent
	this.NoteVersion = noteVersion
	this.NoteCreatedByUserId = noteCreatedByUserId
	this.NoteModifiedByUserId = noteModifiedByUserId
	return &this
}

// NewNoteWithDefaults instantiates a new Note object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteWithDefaults() *Note {
	this := Note{}
	return &this
}

// GetNoteId returns the NoteId field value if set, zero value otherwise.
func (o *Note) GetNoteId() int32 {
	if o == nil || o.NoteId == nil {
		var ret int32
		return ret
	}
	return *o.NoteId
}

// GetNoteIdOk returns a tuple with the NoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Note) GetNoteIdOk() (*int32, bool) {
	if o == nil || o.NoteId == nil {
		return nil, false
	}
	return o.NoteId, true
}

// HasNoteId returns a boolean if a field has been set.
func (o *Note) HasNoteId() bool {
	if o != nil && o.NoteId != nil {
		return true
	}

	return false
}

// SetNoteId gets a reference to the given int32 and assigns it to the NoteId field.
func (o *Note) SetNoteId(v int32) {
	o.NoteId = &v
}

// GetNoteTitle returns the NoteTitle field value
func (o *Note) GetNoteTitle() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.NoteTitle
}

// GetNoteTitleOk returns a tuple with the NoteTitle field value
// and a boolean to check if the value has been set.
func (o *Note) GetNoteTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NoteTitle, true
}

// SetNoteTitle sets field value
func (o *Note) SetNoteTitle(v string) {
	o.NoteTitle = v
}

// GetNoteContent returns the NoteContent field value
func (o *Note) GetNoteContent() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.NoteContent
}

// GetNoteContentOk returns a tuple with the NoteContent field value
// and a boolean to check if the value has been set.
func (o *Note) GetNoteContentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NoteContent, true
}

// SetNoteContent sets field value
func (o *Note) SetNoteContent(v string) {
	o.NoteContent = v
}

// GetNoteVersion returns the NoteVersion field value
func (o *Note) GetNoteVersion() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.NoteVersion
}

// GetNoteVersionOk returns a tuple with the NoteVersion field value
// and a boolean to check if the value has been set.
func (o *Note) GetNoteVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NoteVersion, true
}

// SetNoteVersion sets field value
func (o *Note) SetNoteVersion(v int32) {
	o.NoteVersion = v
}

// GetCase returns the Case field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Note) GetCase() int32 {
	if o == nil || o.Case.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Case.Get()
}

// GetCaseOk returns a tuple with the Case field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Note) GetCaseOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Case.Get(), o.Case.IsSet()
}

// HasCase returns a boolean if a field has been set.
func (o *Note) HasCase() bool {
	if o != nil && o.Case.IsSet() {
		return true
	}

	return false
}

// SetCase gets a reference to the given NullableInt32 and assigns it to the Case field.
func (o *Note) SetCase(v int32) {
	o.Case.Set(&v)
}
// SetCaseNil sets the value for Case to be an explicit nil
func (o *Note) SetCaseNil() {
	o.Case.Set(nil)
}

// UnsetCase ensures that no value is present for Case, not even an explicit nil
func (o *Note) UnsetCase() {
	o.Case.Unset()
}

// GetNotestatus returns the Notestatus field value if set, zero value otherwise.
func (o *Note) GetNotestatus() int32 {
	if o == nil || o.Notestatus == nil {
		var ret int32
		return ret
	}
	return *o.Notestatus
}

// GetNotestatusOk returns a tuple with the Notestatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Note) GetNotestatusOk() (*int32, bool) {
	if o == nil || o.Notestatus == nil {
		return nil, false
	}
	return o.Notestatus, true
}

// HasNotestatus returns a boolean if a field has been set.
func (o *Note) HasNotestatus() bool {
	if o != nil && o.Notestatus != nil {
		return true
	}

	return false
}

// SetNotestatus gets a reference to the given int32 and assigns it to the Notestatus field.
func (o *Note) SetNotestatus(v int32) {
	o.Notestatus = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *Note) GetTag() []int32 {
	if o == nil || o.Tag == nil {
		var ret []int32
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Note) GetTagOk() (*[]int32, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Note) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given []int32 and assigns it to the Tag field.
func (o *Note) SetTag(v []int32) {
	o.Tag = &v
}

// GetNoteCreateTime returns the NoteCreateTime field value if set, zero value otherwise.
func (o *Note) GetNoteCreateTime() time.Time {
	if o == nil || o.NoteCreateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.NoteCreateTime
}

// GetNoteCreateTimeOk returns a tuple with the NoteCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Note) GetNoteCreateTimeOk() (*time.Time, bool) {
	if o == nil || o.NoteCreateTime == nil {
		return nil, false
	}
	return o.NoteCreateTime, true
}

// HasNoteCreateTime returns a boolean if a field has been set.
func (o *Note) HasNoteCreateTime() bool {
	if o != nil && o.NoteCreateTime != nil {
		return true
	}

	return false
}

// SetNoteCreateTime gets a reference to the given time.Time and assigns it to the NoteCreateTime field.
func (o *Note) SetNoteCreateTime(v time.Time) {
	o.NoteCreateTime = &v
}

// GetNoteCreatedByUserId returns the NoteCreatedByUserId field value
func (o *Note) GetNoteCreatedByUserId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.NoteCreatedByUserId
}

// GetNoteCreatedByUserIdOk returns a tuple with the NoteCreatedByUserId field value
// and a boolean to check if the value has been set.
func (o *Note) GetNoteCreatedByUserIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NoteCreatedByUserId, true
}

// SetNoteCreatedByUserId sets field value
func (o *Note) SetNoteCreatedByUserId(v int32) {
	o.NoteCreatedByUserId = v
}

// GetNoteModifyTime returns the NoteModifyTime field value if set, zero value otherwise.
func (o *Note) GetNoteModifyTime() time.Time {
	if o == nil || o.NoteModifyTime == nil {
		var ret time.Time
		return ret
	}
	return *o.NoteModifyTime
}

// GetNoteModifyTimeOk returns a tuple with the NoteModifyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Note) GetNoteModifyTimeOk() (*time.Time, bool) {
	if o == nil || o.NoteModifyTime == nil {
		return nil, false
	}
	return o.NoteModifyTime, true
}

// HasNoteModifyTime returns a boolean if a field has been set.
func (o *Note) HasNoteModifyTime() bool {
	if o != nil && o.NoteModifyTime != nil {
		return true
	}

	return false
}

// SetNoteModifyTime gets a reference to the given time.Time and assigns it to the NoteModifyTime field.
func (o *Note) SetNoteModifyTime(v time.Time) {
	o.NoteModifyTime = &v
}

// GetNoteModifiedByUserId returns the NoteModifiedByUserId field value
func (o *Note) GetNoteModifiedByUserId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.NoteModifiedByUserId
}

// GetNoteModifiedByUserIdOk returns a tuple with the NoteModifiedByUserId field value
// and a boolean to check if the value has been set.
func (o *Note) GetNoteModifiedByUserIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NoteModifiedByUserId, true
}

// SetNoteModifiedByUserId sets field value
func (o *Note) SetNoteModifiedByUserId(v int32) {
	o.NoteModifiedByUserId = v
}

func (o Note) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NoteId != nil {
		toSerialize["note_id"] = o.NoteId
	}
	if true {
		toSerialize["note_title"] = o.NoteTitle
	}
	if true {
		toSerialize["note_content"] = o.NoteContent
	}
	if true {
		toSerialize["note_version"] = o.NoteVersion
	}
	if o.Case.IsSet() {
		toSerialize["case"] = o.Case.Get()
	}
	if o.Notestatus != nil {
		toSerialize["notestatus"] = o.Notestatus
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if o.NoteCreateTime != nil {
		toSerialize["note_create_time"] = o.NoteCreateTime
	}
	if true {
		toSerialize["note_created_by_user_id"] = o.NoteCreatedByUserId
	}
	if o.NoteModifyTime != nil {
		toSerialize["note_modify_time"] = o.NoteModifyTime
	}
	if true {
		toSerialize["note_modified_by_user_id"] = o.NoteModifiedByUserId
	}
	return json.Marshal(toSerialize)
}

type NullableNote struct {
	value *Note
	isSet bool
}

func (v NullableNote) Get() *Note {
	return v.value
}

func (v *NullableNote) Set(val *Note) {
	v.value = val
	v.isSet = true
}

func (v NullableNote) IsSet() bool {
	return v.isSet
}

func (v *NullableNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNote(val *Note) *NullableNote {
	return &NullableNote{value: val, isSet: true}
}

func (v NullableNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



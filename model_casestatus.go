/*
 * DFIRTrack
 *
 * OpenAPI 3 - Documentation of DFIRTrack API
 *
 * API version: v1.5.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dfirtrackapi

import (
	"encoding/json"
)

// Casestatus struct for Casestatus
type Casestatus struct {
	CasestatusId *int32 `json:"casestatus_id,omitempty"`
	CasestatusName string `json:"casestatus_name"`
}

// NewCasestatus instantiates a new Casestatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCasestatus(casestatusName string, ) *Casestatus {
	this := Casestatus{}
	this.CasestatusName = casestatusName
	return &this
}

// NewCasestatusWithDefaults instantiates a new Casestatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCasestatusWithDefaults() *Casestatus {
	this := Casestatus{}
	return &this
}

// GetCasestatusId returns the CasestatusId field value if set, zero value otherwise.
func (o *Casestatus) GetCasestatusId() int32 {
	if o == nil || o.CasestatusId == nil {
		var ret int32
		return ret
	}
	return *o.CasestatusId
}

// GetCasestatusIdOk returns a tuple with the CasestatusId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Casestatus) GetCasestatusIdOk() (*int32, bool) {
	if o == nil || o.CasestatusId == nil {
		return nil, false
	}
	return o.CasestatusId, true
}

// HasCasestatusId returns a boolean if a field has been set.
func (o *Casestatus) HasCasestatusId() bool {
	if o != nil && o.CasestatusId != nil {
		return true
	}

	return false
}

// SetCasestatusId gets a reference to the given int32 and assigns it to the CasestatusId field.
func (o *Casestatus) SetCasestatusId(v int32) {
	o.CasestatusId = &v
}

// GetCasestatusName returns the CasestatusName field value
func (o *Casestatus) GetCasestatusName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.CasestatusName
}

// GetCasestatusNameOk returns a tuple with the CasestatusName field value
// and a boolean to check if the value has been set.
func (o *Casestatus) GetCasestatusNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CasestatusName, true
}

// SetCasestatusName sets field value
func (o *Casestatus) SetCasestatusName(v string) {
	o.CasestatusName = v
}

func (o Casestatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CasestatusId != nil {
		toSerialize["casestatus_id"] = o.CasestatusId
	}
	if true {
		toSerialize["casestatus_name"] = o.CasestatusName
	}
	return json.Marshal(toSerialize)
}

type NullableCasestatus struct {
	value *Casestatus
	isSet bool
}

func (v NullableCasestatus) Get() *Casestatus {
	return v.value
}

func (v *NullableCasestatus) Set(val *Casestatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCasestatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCasestatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCasestatus(val *Casestatus) *NullableCasestatus {
	return &NullableCasestatus{value: val, isSet: true}
}

func (v NullableCasestatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCasestatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * DFIRTrack
 *
 * OpenAPI 3 - Documentation of DFIRTrack API
 *
 * API version: 0.4.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dfirtrackapi

import (
	"encoding/json"
	"time"
)

// Task struct for Task
type Task struct {
	TaskId *int32 `json:"task_id,omitempty"`
	ParentTask NullableInt32 `json:"parent_task,omitempty"`
	Taskname int32 `json:"taskname"`
	Taskpriority int32 `json:"taskpriority"`
	Taskstatus int32 `json:"taskstatus"`
	System NullableInt32 `json:"system,omitempty"`
	TaskAssignedToUserId NullableInt32 `json:"task_assigned_to_user_id,omitempty"`
	Tag *[]int32 `json:"tag,omitempty"`
	TaskScheduledTime NullableTime `json:"task_scheduled_time,omitempty"`
	TaskStartedTime NullableTime `json:"task_started_time,omitempty"`
	TaskFinishedTime NullableTime `json:"task_finished_time,omitempty"`
	TaskDueTime NullableTime `json:"task_due_time,omitempty"`
	TaskCreateTime *time.Time `json:"task_create_time,omitempty"`
	TaskModifyTime *time.Time `json:"task_modify_time,omitempty"`
	TaskCreatedByUserId int32 `json:"task_created_by_user_id"`
	TaskModifiedByUserId int32 `json:"task_modified_by_user_id"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask(taskname int32, taskpriority int32, taskstatus int32, taskCreatedByUserId int32, taskModifiedByUserId int32, ) *Task {
	this := Task{}
	this.Taskname = taskname
	this.Taskpriority = taskpriority
	this.Taskstatus = taskstatus
	this.TaskCreatedByUserId = taskCreatedByUserId
	this.TaskModifiedByUserId = taskModifiedByUserId
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *Task) GetTaskId() int32 {
	if o == nil || o.TaskId == nil {
		var ret int32
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTaskIdOk() (*int32, bool) {
	if o == nil || o.TaskId == nil {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *Task) HasTaskId() bool {
	if o != nil && o.TaskId != nil {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given int32 and assigns it to the TaskId field.
func (o *Task) SetTaskId(v int32) {
	o.TaskId = &v
}

// GetParentTask returns the ParentTask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetParentTask() int32 {
	if o == nil || o.ParentTask.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ParentTask.Get()
}

// GetParentTaskOk returns a tuple with the ParentTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetParentTaskOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentTask.Get(), o.ParentTask.IsSet()
}

// HasParentTask returns a boolean if a field has been set.
func (o *Task) HasParentTask() bool {
	if o != nil && o.ParentTask.IsSet() {
		return true
	}

	return false
}

// SetParentTask gets a reference to the given NullableInt32 and assigns it to the ParentTask field.
func (o *Task) SetParentTask(v int32) {
	o.ParentTask.Set(&v)
}
// SetParentTaskNil sets the value for ParentTask to be an explicit nil
func (o *Task) SetParentTaskNil() {
	o.ParentTask.Set(nil)
}

// UnsetParentTask ensures that no value is present for ParentTask, not even an explicit nil
func (o *Task) UnsetParentTask() {
	o.ParentTask.Unset()
}

// GetTaskname returns the Taskname field value
func (o *Task) GetTaskname() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Taskname
}

// GetTasknameOk returns a tuple with the Taskname field value
// and a boolean to check if the value has been set.
func (o *Task) GetTasknameOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Taskname, true
}

// SetTaskname sets field value
func (o *Task) SetTaskname(v int32) {
	o.Taskname = v
}

// GetTaskpriority returns the Taskpriority field value
func (o *Task) GetTaskpriority() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Taskpriority
}

// GetTaskpriorityOk returns a tuple with the Taskpriority field value
// and a boolean to check if the value has been set.
func (o *Task) GetTaskpriorityOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Taskpriority, true
}

// SetTaskpriority sets field value
func (o *Task) SetTaskpriority(v int32) {
	o.Taskpriority = v
}

// GetTaskstatus returns the Taskstatus field value
func (o *Task) GetTaskstatus() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Taskstatus
}

// GetTaskstatusOk returns a tuple with the Taskstatus field value
// and a boolean to check if the value has been set.
func (o *Task) GetTaskstatusOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Taskstatus, true
}

// SetTaskstatus sets field value
func (o *Task) SetTaskstatus(v int32) {
	o.Taskstatus = v
}

// GetSystem returns the System field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetSystem() int32 {
	if o == nil || o.System.Get() == nil {
		var ret int32
		return ret
	}
	return *o.System.Get()
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetSystemOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.System.Get(), o.System.IsSet()
}

// HasSystem returns a boolean if a field has been set.
func (o *Task) HasSystem() bool {
	if o != nil && o.System.IsSet() {
		return true
	}

	return false
}

// SetSystem gets a reference to the given NullableInt32 and assigns it to the System field.
func (o *Task) SetSystem(v int32) {
	o.System.Set(&v)
}
// SetSystemNil sets the value for System to be an explicit nil
func (o *Task) SetSystemNil() {
	o.System.Set(nil)
}

// UnsetSystem ensures that no value is present for System, not even an explicit nil
func (o *Task) UnsetSystem() {
	o.System.Unset()
}

// GetTaskAssignedToUserId returns the TaskAssignedToUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetTaskAssignedToUserId() int32 {
	if o == nil || o.TaskAssignedToUserId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TaskAssignedToUserId.Get()
}

// GetTaskAssignedToUserIdOk returns a tuple with the TaskAssignedToUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetTaskAssignedToUserIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskAssignedToUserId.Get(), o.TaskAssignedToUserId.IsSet()
}

// HasTaskAssignedToUserId returns a boolean if a field has been set.
func (o *Task) HasTaskAssignedToUserId() bool {
	if o != nil && o.TaskAssignedToUserId.IsSet() {
		return true
	}

	return false
}

// SetTaskAssignedToUserId gets a reference to the given NullableInt32 and assigns it to the TaskAssignedToUserId field.
func (o *Task) SetTaskAssignedToUserId(v int32) {
	o.TaskAssignedToUserId.Set(&v)
}
// SetTaskAssignedToUserIdNil sets the value for TaskAssignedToUserId to be an explicit nil
func (o *Task) SetTaskAssignedToUserIdNil() {
	o.TaskAssignedToUserId.Set(nil)
}

// UnsetTaskAssignedToUserId ensures that no value is present for TaskAssignedToUserId, not even an explicit nil
func (o *Task) UnsetTaskAssignedToUserId() {
	o.TaskAssignedToUserId.Unset()
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *Task) GetTag() []int32 {
	if o == nil || o.Tag == nil {
		var ret []int32
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTagOk() (*[]int32, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Task) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given []int32 and assigns it to the Tag field.
func (o *Task) SetTag(v []int32) {
	o.Tag = &v
}

// GetTaskScheduledTime returns the TaskScheduledTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetTaskScheduledTime() time.Time {
	if o == nil || o.TaskScheduledTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.TaskScheduledTime.Get()
}

// GetTaskScheduledTimeOk returns a tuple with the TaskScheduledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetTaskScheduledTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskScheduledTime.Get(), o.TaskScheduledTime.IsSet()
}

// HasTaskScheduledTime returns a boolean if a field has been set.
func (o *Task) HasTaskScheduledTime() bool {
	if o != nil && o.TaskScheduledTime.IsSet() {
		return true
	}

	return false
}

// SetTaskScheduledTime gets a reference to the given NullableTime and assigns it to the TaskScheduledTime field.
func (o *Task) SetTaskScheduledTime(v time.Time) {
	o.TaskScheduledTime.Set(&v)
}
// SetTaskScheduledTimeNil sets the value for TaskScheduledTime to be an explicit nil
func (o *Task) SetTaskScheduledTimeNil() {
	o.TaskScheduledTime.Set(nil)
}

// UnsetTaskScheduledTime ensures that no value is present for TaskScheduledTime, not even an explicit nil
func (o *Task) UnsetTaskScheduledTime() {
	o.TaskScheduledTime.Unset()
}

// GetTaskStartedTime returns the TaskStartedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetTaskStartedTime() time.Time {
	if o == nil || o.TaskStartedTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.TaskStartedTime.Get()
}

// GetTaskStartedTimeOk returns a tuple with the TaskStartedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetTaskStartedTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskStartedTime.Get(), o.TaskStartedTime.IsSet()
}

// HasTaskStartedTime returns a boolean if a field has been set.
func (o *Task) HasTaskStartedTime() bool {
	if o != nil && o.TaskStartedTime.IsSet() {
		return true
	}

	return false
}

// SetTaskStartedTime gets a reference to the given NullableTime and assigns it to the TaskStartedTime field.
func (o *Task) SetTaskStartedTime(v time.Time) {
	o.TaskStartedTime.Set(&v)
}
// SetTaskStartedTimeNil sets the value for TaskStartedTime to be an explicit nil
func (o *Task) SetTaskStartedTimeNil() {
	o.TaskStartedTime.Set(nil)
}

// UnsetTaskStartedTime ensures that no value is present for TaskStartedTime, not even an explicit nil
func (o *Task) UnsetTaskStartedTime() {
	o.TaskStartedTime.Unset()
}

// GetTaskFinishedTime returns the TaskFinishedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetTaskFinishedTime() time.Time {
	if o == nil || o.TaskFinishedTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.TaskFinishedTime.Get()
}

// GetTaskFinishedTimeOk returns a tuple with the TaskFinishedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetTaskFinishedTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskFinishedTime.Get(), o.TaskFinishedTime.IsSet()
}

// HasTaskFinishedTime returns a boolean if a field has been set.
func (o *Task) HasTaskFinishedTime() bool {
	if o != nil && o.TaskFinishedTime.IsSet() {
		return true
	}

	return false
}

// SetTaskFinishedTime gets a reference to the given NullableTime and assigns it to the TaskFinishedTime field.
func (o *Task) SetTaskFinishedTime(v time.Time) {
	o.TaskFinishedTime.Set(&v)
}
// SetTaskFinishedTimeNil sets the value for TaskFinishedTime to be an explicit nil
func (o *Task) SetTaskFinishedTimeNil() {
	o.TaskFinishedTime.Set(nil)
}

// UnsetTaskFinishedTime ensures that no value is present for TaskFinishedTime, not even an explicit nil
func (o *Task) UnsetTaskFinishedTime() {
	o.TaskFinishedTime.Unset()
}

// GetTaskDueTime returns the TaskDueTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetTaskDueTime() time.Time {
	if o == nil || o.TaskDueTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.TaskDueTime.Get()
}

// GetTaskDueTimeOk returns a tuple with the TaskDueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetTaskDueTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskDueTime.Get(), o.TaskDueTime.IsSet()
}

// HasTaskDueTime returns a boolean if a field has been set.
func (o *Task) HasTaskDueTime() bool {
	if o != nil && o.TaskDueTime.IsSet() {
		return true
	}

	return false
}

// SetTaskDueTime gets a reference to the given NullableTime and assigns it to the TaskDueTime field.
func (o *Task) SetTaskDueTime(v time.Time) {
	o.TaskDueTime.Set(&v)
}
// SetTaskDueTimeNil sets the value for TaskDueTime to be an explicit nil
func (o *Task) SetTaskDueTimeNil() {
	o.TaskDueTime.Set(nil)
}

// UnsetTaskDueTime ensures that no value is present for TaskDueTime, not even an explicit nil
func (o *Task) UnsetTaskDueTime() {
	o.TaskDueTime.Unset()
}

// GetTaskCreateTime returns the TaskCreateTime field value if set, zero value otherwise.
func (o *Task) GetTaskCreateTime() time.Time {
	if o == nil || o.TaskCreateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.TaskCreateTime
}

// GetTaskCreateTimeOk returns a tuple with the TaskCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTaskCreateTimeOk() (*time.Time, bool) {
	if o == nil || o.TaskCreateTime == nil {
		return nil, false
	}
	return o.TaskCreateTime, true
}

// HasTaskCreateTime returns a boolean if a field has been set.
func (o *Task) HasTaskCreateTime() bool {
	if o != nil && o.TaskCreateTime != nil {
		return true
	}

	return false
}

// SetTaskCreateTime gets a reference to the given time.Time and assigns it to the TaskCreateTime field.
func (o *Task) SetTaskCreateTime(v time.Time) {
	o.TaskCreateTime = &v
}

// GetTaskModifyTime returns the TaskModifyTime field value if set, zero value otherwise.
func (o *Task) GetTaskModifyTime() time.Time {
	if o == nil || o.TaskModifyTime == nil {
		var ret time.Time
		return ret
	}
	return *o.TaskModifyTime
}

// GetTaskModifyTimeOk returns a tuple with the TaskModifyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTaskModifyTimeOk() (*time.Time, bool) {
	if o == nil || o.TaskModifyTime == nil {
		return nil, false
	}
	return o.TaskModifyTime, true
}

// HasTaskModifyTime returns a boolean if a field has been set.
func (o *Task) HasTaskModifyTime() bool {
	if o != nil && o.TaskModifyTime != nil {
		return true
	}

	return false
}

// SetTaskModifyTime gets a reference to the given time.Time and assigns it to the TaskModifyTime field.
func (o *Task) SetTaskModifyTime(v time.Time) {
	o.TaskModifyTime = &v
}

// GetTaskCreatedByUserId returns the TaskCreatedByUserId field value
func (o *Task) GetTaskCreatedByUserId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.TaskCreatedByUserId
}

// GetTaskCreatedByUserIdOk returns a tuple with the TaskCreatedByUserId field value
// and a boolean to check if the value has been set.
func (o *Task) GetTaskCreatedByUserIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TaskCreatedByUserId, true
}

// SetTaskCreatedByUserId sets field value
func (o *Task) SetTaskCreatedByUserId(v int32) {
	o.TaskCreatedByUserId = v
}

// GetTaskModifiedByUserId returns the TaskModifiedByUserId field value
func (o *Task) GetTaskModifiedByUserId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.TaskModifiedByUserId
}

// GetTaskModifiedByUserIdOk returns a tuple with the TaskModifiedByUserId field value
// and a boolean to check if the value has been set.
func (o *Task) GetTaskModifiedByUserIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TaskModifiedByUserId, true
}

// SetTaskModifiedByUserId sets field value
func (o *Task) SetTaskModifiedByUserId(v int32) {
	o.TaskModifiedByUserId = v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TaskId != nil {
		toSerialize["task_id"] = o.TaskId
	}
	if o.ParentTask.IsSet() {
		toSerialize["parent_task"] = o.ParentTask.Get()
	}
	if true {
		toSerialize["taskname"] = o.Taskname
	}
	if true {
		toSerialize["taskpriority"] = o.Taskpriority
	}
	if true {
		toSerialize["taskstatus"] = o.Taskstatus
	}
	if o.System.IsSet() {
		toSerialize["system"] = o.System.Get()
	}
	if o.TaskAssignedToUserId.IsSet() {
		toSerialize["task_assigned_to_user_id"] = o.TaskAssignedToUserId.Get()
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if o.TaskScheduledTime.IsSet() {
		toSerialize["task_scheduled_time"] = o.TaskScheduledTime.Get()
	}
	if o.TaskStartedTime.IsSet() {
		toSerialize["task_started_time"] = o.TaskStartedTime.Get()
	}
	if o.TaskFinishedTime.IsSet() {
		toSerialize["task_finished_time"] = o.TaskFinishedTime.Get()
	}
	if o.TaskDueTime.IsSet() {
		toSerialize["task_due_time"] = o.TaskDueTime.Get()
	}
	if o.TaskCreateTime != nil {
		toSerialize["task_create_time"] = o.TaskCreateTime
	}
	if o.TaskModifyTime != nil {
		toSerialize["task_modify_time"] = o.TaskModifyTime
	}
	if true {
		toSerialize["task_created_by_user_id"] = o.TaskCreatedByUserId
	}
	if true {
		toSerialize["task_modified_by_user_id"] = o.TaskModifiedByUserId
	}
	return json.Marshal(toSerialize)
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


